// This is a money calculator, which performs basic operations with 2 types of values:  long double and string

#include <iostream>
#include <string>
#include <cstring>
#include <sstream>
#include <algorithm>
#include <ctype.h>
#include <stdlib.h> 
#include <iomanip>
using namespace std;
class Money 
{
    private:    
        long double moneyLong;                
        string ldtoms(const long double& num);
        string ldtoms(const long double& num) const;
        long double mstold(const string& input);
        long double mstold(const string& input) const;
    public:
        Money(long double val): moneyLong(val)
        {  }
        Money(): moneyLong(0)
        {  }
        long double getMoneyLong()const;                   
        void setMoneyLong(const long double& input);
        void setMoneyString(const string& input);
        operator long double()
        {
            return moneyLong;
        }
        Money operator+(const Money& m2);
        Money operator-(const Money& m2);
        friend Money operator*(const Money& m2, const long double& val);
        Money operator/(const long double& val);   
        long double operator/(const Money& m2); 
        friend ostream& operator<<(ostream& os, const Money& m);           
        friend istream& operator>>(istream& is, Money& m);
};

ostream& operator<<(ostream& os, const Money& m)
{
    long double temp = m.moneyLong;
    string moneyString = m.ldtoms(temp);
    return os << moneyString << endl;
}

istream& operator>>(istream& is, Money& m) 
{
    is >> m.moneyLong;
}


long double Money::getMoneyLong()const
{
    return moneyLong;
}

void Money::setMoneyString(const string& input)
{
    moneyLong = mstold(input);
}

void Money::setMoneyLong(const long double& input)
{
    moneyLong = input;
}

Money Money::operator+(const Money& m2)
{
    long double value = moneyLong + m2.moneyLong;
    return Money(value);
}

Money Money::operator-(const Money& m2)
{
    long double value = moneyLong - m2.moneyLong;
    return Money(value);
}

Money operator*(const Money& m2, const long double& val)
{
    long double value = m2.getMoneyLong()*val;
    return Money(value);
}


Money Money::operator/(const long double& val)
{
    Money value = moneyLong/val;
    return value;
}

long double Money::operator/(const Money& m2)
{
    Money value = moneyLong/m2.moneyLong;
    return value;
}


int main()
{
    long double lng;
    string str;
    Money m1, m2, m3;
    char ch;
    do 
    {
        cout<<"Enter first value (long double): ";
        cin >> m1;
        cout<<"Enter second value (string): ";
        cin >> m2;
        cout << m1 << endl;
        cout << m2 << endl;
        long double ld = 3.5;  //value to multiply or divide
        m3 = m1 + m2;
        cout<<"Sum: ";
        cout<<m3;
        cout<<"Difference: ";
        m3 = m1 - m2;
        cout<<m3;
        cout<<"Product: ";
        m3 = ld*m1;                   
        cout<<m3;
        m3 = m1*ld;
        cout<<m3;
        cout<<"Quotient (money): ";
        m3 = m1/ld;
        cout<<m3;
        m3 = ld/m1;
        cout<<m3;
        cout<<"Quotient (dimensionless): ";
        float n = m1/m2;
        cout<<n<<endl;
        cout<<"Continue? (y/n) ";
        cin>>ch;
    } while (ch=='y' or ch=='Y');
    return 0;
}

string Money::ldtoms(const long double& num)  //long double to Money
{
    string mon1;
    string mon2;
    if (num < 9999999999999990.00)
    {
        stringstream conv;
        conv << fixed << setprecision(2) << num; 
        conv >> mon1;
        string doll("$");
        mon2 = mon1;
        mon2 = doll + mon2;
        for (int i = mon2.size() - 6; i > 1; i -= 3)
            mon2.insert(i, " ");
    }
    else 
    {
        cout << "The value is too big"<<endl;
    }
    return mon2;
}

string Money::ldtoms(const long double& num) const  
{
    string mon1;
    string mon2;
    if (num < 9999999999999990.00)
    {
        stringstream conv;
        conv << fixed << setprecision(2) << num; 
        conv >> mon1;
        string doll("$");
        mon2 = mon1;
        mon2 = doll + mon2;
        for (int i = mon2.size() - 6; i > 1; i -= 3)
            mon2.insert(i, " ");
    }
    else 
    {
        cout << "The value is too big"<<endl;
    }
    return mon2;
}

long double Money::mstold(const string& input) //Money to long double
{
    int length=input.length();
    string temp;
    char ultratemp[length + 1];
    char *pEnd = nullptr;
    for(int j = 0; j < length; j++)
    {
        if (isdigit (input[j]) or input[j]=='.')
        {
            temp+=input[j];
        }
    }
    strcpy(ultratemp, temp.c_str());
    long double moneyLong=strtold(ultratemp, &pEnd);       
    return moneyLong;
}

long double Money::mstold(const string& input) const
{
    int length=input.length();
    string temp;
    char ultratemp[length + 1];
    char *pEnd = nullptr;
    for(int j = 0; j < length; j++)
    {
        if (isdigit (input[j]) or input[j]=='.')
        {
            temp+=input[j];
        }
    }
    strcpy(ultratemp, temp.c_str());
    long double moneyLong=strtold(ultratemp, &pEnd);        
    return moneyLong;
}
